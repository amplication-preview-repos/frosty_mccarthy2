/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AuthSession } from "./AuthSession";
import { AuthSessionCountArgs } from "./AuthSessionCountArgs";
import { AuthSessionFindManyArgs } from "./AuthSessionFindManyArgs";
import { AuthSessionFindUniqueArgs } from "./AuthSessionFindUniqueArgs";
import { CreateAuthSessionArgs } from "./CreateAuthSessionArgs";
import { UpdateAuthSessionArgs } from "./UpdateAuthSessionArgs";
import { DeleteAuthSessionArgs } from "./DeleteAuthSessionArgs";
import { User } from "../../user/base/User";
import { AuthSessionService } from "../authSession.service";
@graphql.Resolver(() => AuthSession)
export class AuthSessionResolverBase {
  constructor(protected readonly service: AuthSessionService) {}

  async _authSessionsMeta(
    @graphql.Args() args: AuthSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AuthSession])
  async authSessions(
    @graphql.Args() args: AuthSessionFindManyArgs
  ): Promise<AuthSession[]> {
    return this.service.authSessions(args);
  }

  @graphql.Query(() => AuthSession, { nullable: true })
  async authSession(
    @graphql.Args() args: AuthSessionFindUniqueArgs
  ): Promise<AuthSession | null> {
    const result = await this.service.authSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuthSession)
  async createAuthSession(
    @graphql.Args() args: CreateAuthSessionArgs
  ): Promise<AuthSession> {
    return await this.service.createAuthSession({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AuthSession)
  async updateAuthSession(
    @graphql.Args() args: UpdateAuthSessionArgs
  ): Promise<AuthSession | null> {
    try {
      return await this.service.updateAuthSession({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthSession)
  async deleteAuthSession(
    @graphql.Args() args: DeleteAuthSessionArgs
  ): Promise<AuthSession | null> {
    try {
      return await this.service.deleteAuthSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: AuthSession): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
