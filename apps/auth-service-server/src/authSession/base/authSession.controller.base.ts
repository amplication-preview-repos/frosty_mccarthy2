/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthSessionService } from "../authSession.service";
import { AuthSessionCreateInput } from "./AuthSessionCreateInput";
import { AuthSession } from "./AuthSession";
import { AuthSessionFindManyArgs } from "./AuthSessionFindManyArgs";
import { AuthSessionWhereUniqueInput } from "./AuthSessionWhereUniqueInput";
import { AuthSessionUpdateInput } from "./AuthSessionUpdateInput";

export class AuthSessionControllerBase {
  constructor(protected readonly service: AuthSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuthSession })
  async createAuthSession(
    @common.Body() data: AuthSessionCreateInput
  ): Promise<AuthSession> {
    return await this.service.createAuthSession({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        associatedUser: true,
        authToken: true,
        createdAt: true,
        expiresAt: true,
        expiryDate: true,
        id: true,
        token: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userReference: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuthSession] })
  @ApiNestedQuery(AuthSessionFindManyArgs)
  async authSessions(@common.Req() request: Request): Promise<AuthSession[]> {
    const args = plainToClass(AuthSessionFindManyArgs, request.query);
    return this.service.authSessions({
      ...args,
      select: {
        associatedUser: true,
        authToken: true,
        createdAt: true,
        expiresAt: true,
        expiryDate: true,
        id: true,
        token: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userReference: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuthSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async authSession(
    @common.Param() params: AuthSessionWhereUniqueInput
  ): Promise<AuthSession | null> {
    const result = await this.service.authSession({
      where: params,
      select: {
        associatedUser: true,
        authToken: true,
        createdAt: true,
        expiresAt: true,
        expiryDate: true,
        id: true,
        token: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userReference: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuthSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuthSession(
    @common.Param() params: AuthSessionWhereUniqueInput,
    @common.Body() data: AuthSessionUpdateInput
  ): Promise<AuthSession | null> {
    try {
      return await this.service.updateAuthSession({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          associatedUser: true,
          authToken: true,
          createdAt: true,
          expiresAt: true,
          expiryDate: true,
          id: true,
          token: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userReference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuthSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuthSession(
    @common.Param() params: AuthSessionWhereUniqueInput
  ): Promise<AuthSession | null> {
    try {
      return await this.service.deleteAuthSession({
        where: params,
        select: {
          associatedUser: true,
          authToken: true,
          createdAt: true,
          expiresAt: true,
          expiryDate: true,
          id: true,
          token: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          userReference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
